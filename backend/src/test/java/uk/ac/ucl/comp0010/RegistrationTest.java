package uk.ac.ucl.comp0010;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import uk.ac.ucl.comp0010.module.Module;
import uk.ac.ucl.comp0010.module.ModuleRepository;
import uk.ac.ucl.comp0010.registration.Registration;
import uk.ac.ucl.comp0010.registration.RegistrationRepository;
import uk.ac.ucl.comp0010.student.Student;
import uk.ac.ucl.comp0010.student.StudentRepository;


/**
 * Unit test for the Registration class. Ensures correct functionality of constructors, methods, and
 * getter/setter logic.
 */
@DataJpaTest
public class RegistrationTest {

  /**
   * Default constructor for RegistrationTest.
   */
  public RegistrationTest() {
  }

  @Autowired
  private ModuleRepository moduleRepository;
  @Autowired
  private StudentRepository studentRepository;
  @Autowired
  private RegistrationRepository registrationRepository;

  private Student myFirstStudent;
  private Student mySecondStudent;
  private Module myFirstModule;
  private Module mySecondModule;

  /**
   * Helper method to create and return a test `Student` with specified attributes.
   *
   * @param id        The ID of the student.
   * @param firstName The first name of the student.
   * @param lastName  The last name of the student.
   * @param email     The email address of the student.
   * @param username  The username of the student.
   * @return A new instance of a `Student` initialized with the provided details.
   */
  private Student createTestStudent(Long id, String firstName, String lastName, String email,
      String username) {
    Student student = new Student();
    student.setId(id);
    student.setFirstName(firstName);
    student.setLastName(lastName);
    student.setEmail(email);
    student.setUsername(username);
    return student;
  }

  /**
   * Sets up the initial test environment by creating and saving two students and two modules into
   * the database. This runs before each test method to ensure consistent initial state.
   */
  @BeforeEach
  void setUp() {
    // Create and save the student
    myFirstStudent =
        createTestStudent(1L, "First", "Student", "firststudent@mail.com", "firststudent1");
    mySecondStudent =
        createTestStudent(2L, "Second", "Student", "secondstudent@mail.com", "secondstudent2");
    studentRepository.save(myFirstStudent);

    // Create and save the modules
    myFirstModule = new Module("TM1", "TestModule1", true);
    mySecondModule = new Module("TM2", "TestModule2", false);
    moduleRepository.save(myFirstModule);
    moduleRepository.save(mySecondModule);
  }

  /**
   * Tests if the ID is auto-generated for a `Registration` object upon saving it to the database.
   */
  @Test
  void testIdAutoGenerated() {
    Registration registration = new Registration(myFirstStudent, myFirstModule);
    registrationRepository.save(registration);

    assertNotNull(registration.getId(), "ID should be auto-generated upon saving");
  }

  /**
   * Tests the default constructor of the `Registration` class to ensure that it initializes
   * `student` and `module` fields as null by default.
   */
  @Test
  void testDefaultConstructor() {
    Registration registration = new Registration();
    assertNull(registration.getStudent(), "Default constructor should initialize student as null");
    assertNull(registration.getModule(), "Default constructor should initialize module as null");
  }

  /**
   * Tests setting an ID manually to ensure that the `setId` method functions as expected.
   */
  @Test
  void testSetId() {
    Registration registration = new Registration();
    registration.setId(123L); // Manually set the ID for testing purposes
    assertEquals(123L, registration.getId(), "ID should be manually set");
  }

  /**
   * Tests the getter and setter methods for the `Registration` class. Verifies that setting and
   * retrieving `student` and `module` fields works as expected.
   */
  @Test
  void testGettersSetters() {
    Registration registration = new Registration(myFirstStudent, myFirstModule);
    assertEquals(myFirstStudent, registration.getStudent());
    assertEquals(myFirstModule, registration.getModule());
    registration.setStudent(mySecondStudent);
    registration.setModule(myFirstModule);
    assertEquals(mySecondStudent, registration.getStudent());
    assertEquals(myFirstModule, registration.getModule());
  }
}
