package uk.ac.ucl.comp0010.grade;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import uk.ac.ucl.comp0010.exceptions.InvalidGradeException;
import uk.ac.ucl.comp0010.module.Module;
import uk.ac.ucl.comp0010.student.Student;

/**
 * Represents a grade achieved by a student in a specific module. Each grade is uniquely identified
 * by an ID and includes a score, the student who achieved it, and the module in which it was
 * achieved. The score is validated to ensure it is within the range 0-100.
 */
@Entity
public class Grade {

  /**
   * The unique identifier for this grade. Automatically generated by the persistence layer.
   */
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  /**
   * The score achieved by the student in the associated module. Must be a value between 0 and 100.
   */
  private Integer score;

  /**
   * The student associated with this grade. Defined as a many-to-one relationship in the database.
   */
  @ManyToOne
  @JoinColumn(name = "student_id")
  private Student student;

  /**
   * The module in which this grade was achieved. Defined as a many-to-one relationship in the
   * database.
   */
  @ManyToOne
  @JoinColumn(name = "module_id")
  private Module module;

  /**
   * Default constructor required for JPA.
   */
  public Grade() {
  }

  /**
   * Constructs a new {@code Grade} with the specified score, student, and module. This constructor
   * enforces validation on the score to ensure it is within the range 0-100. If the score is
   * invalid, an {@link InvalidGradeException} is thrown.
   *
   * @param score   the score achieved by the student, must be between 0 and 100.
   * @param student the {@link Student} associated with this grade.
   * @param module  the {@link Module} associated with this grade.
   * @throws InvalidGradeException if the score is less than 0 or greater than 100.
   */
  public Grade(Integer score, Student student, Module module) {
    if (score > 100 || score < 0) {
      throw new InvalidGradeException("Grade score must be between 0 and 100!");
    }
    this.score = score;
    this.student = student;
    this.module = module;
  }

  /**
   * Returns the unique ID of this grade.
   *
   * @return the unique identifier of the grade.
   */
  public Long getId() {
    return id;
  }

  /**
   * Returns the score achieved by the student.
   *
   * @return the score of the grade.
   */
  public Integer getScore() {
    return score;
  }

  /**
   * Sets the score for this grade. The score must be between 0 and 100. If the provided score is
   * invalid, an {@link InvalidGradeException} is thrown.
   *
   * @param score the new score to set.
   * @throws InvalidGradeException if the score is less than 0 or greater than 100.
   */
  public void setScore(Integer score) {
    this.score = score;
  }

  /**
   * Returns the student associated with this grade.
   *
   * @return the {@link Student} associated with the grade.
   */
  public Student getStudent() {
    return student;
  }

  /**
   * Sets the student associated with this grade.
   *
   * @param student the {@link Student} to associate with this grade.
   */
  public void setStudent(Student student) {
    this.student = student;
  }

  /**
   * Returns the module associated with this grade.
   *
   * @return the {@link Module} associated with the grade.
   */
  public Module getModule() {
    return module;
  }

  /**
   * Sets the module associated with this grade.
   *
   * @param module the {@link Module} to associate with this grade.
   */
  public void setModule(Module module) {
    this.module = module;
  }

  /**
   * Returns a string representation of this grade. Includes the grade ID, score, and identifiers of
   * the associated student and module.
   *
   * @return a string representation of the grade.
   */
  @Override
  public String toString() {
    return "Grade{" + "id=" + id + ", score=" + score + ", student=" + (student != null
        ? student.getId() :
        "null") + ", module=" + (module != null ? module.getCode() : "null") + '}';
  }

}
